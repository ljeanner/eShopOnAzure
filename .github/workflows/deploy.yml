name: 'Infrastructure and Application Deployment'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  WORKING_DIR: ./infra-tf
  DOTNET_VERSION: '8.0.x'
  TF_VAR_sql_admin_username: ${{ secrets.SQL_ADMIN_USERNAME }}
  TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}
  TF_VAR_app_user_password: ${{ secrets.APP_USER_PASSWORD }}
  TF_VAR_azure_ad_admin_username: ${{ secrets.AZURE_AD_ADMIN_USERNAME }}
  TF_VAR_azure_ad_admin_object_id: ${{ secrets.AZURE_AD_ADMIN_OBJECT_ID }}

jobs:
  terraform:
    name: 'Deploy Infrastructure and Application'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.7'

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: ${{ env.WORKING_DIR }}
      continue-on-error: true

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.WORKING_DIR }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ${{ env.WORKING_DIR }}
      if: github.event_name == 'pull_request'
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: terraform apply -auto-approve
      working-directory: ${{ env.WORKING_DIR }}

    - name: Get Infrastructure Outputs
      id: terraform
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: |
        RG_NAME=$(terraform output -raw resource_group_name)
        echo "RESOURCE_GROUP=$RG_NAME" >> $GITHUB_ENV
        
        WEBAPP_NAME=$(terraform output -raw web_app_name)
        echo "AZURE_WEBAPP_NAME=$WEBAPP_NAME" >> $GITHUB_ENV
        
        KV_NAME=$(terraform output -raw key_vault_name)
        echo "KEY_VAULT_NAME=$KV_NAME" >> $GITHUB_ENV
      working-directory: ${{ env.WORKING_DIR }}

    - name: Setup .NET
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: true

    - name: Build
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: dotnet build ./eShopOnWeb.sln --configuration Release

    - name: Test
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: dotnet test ./eShopOnWeb.sln --configuration Release --no-build

    - name: Publish Web App
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: dotnet publish ./src/Web/Web.csproj --configuration Release --no-build --output ./publish/web

    - name: Publish Public API
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: dotnet publish ./src/PublicApi/PublicApi.csproj --configuration Release --no-build --output ./publish/api

    - name: Get Connection Strings
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: |
        CATALOG_CONN=$(az keyvault secret show --vault-name ${{ env.KEY_VAULT_NAME }} --name "CatalogConnectionString" --query "value" -o tsv)
        IDENTITY_CONN=$(az keyvault secret show --vault-name ${{ env.KEY_VAULT_NAME }} --name "IdentityConnectionString" --query "value" -o tsv)
        
        # Create production settings for Web App
        cat << EOF > ./publish/web/appsettings.Production.json
        {
          "ConnectionStrings": {
            "CatalogConnection": "$CATALOG_CONN",
            "IdentityConnection": "$IDENTITY_CONN"
          }
        }
        EOF
        
        # Create production settings for API
        cat << EOF > ./publish/api/appsettings.Production.json
        {
          "ConnectionStrings": {
            "CatalogConnection": "$CATALOG_CONN",
            "IdentityConnection": "$IDENTITY_CONN"
          }
        }
        EOF

    - name: Deploy Web App
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./publish/web